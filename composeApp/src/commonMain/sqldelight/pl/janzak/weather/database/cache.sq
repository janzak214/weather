import io.ktor.http.Headers;
import io.ktor.http.HttpProtocolVersion;
import io.ktor.http.Url;
import io.ktor.util.date.GMTDate;
import kotlin.Int;
import kotlin.String;
import kotlin.collections.Map;

CREATE TABLE cacheEntry (
    url TEXT AS Url NOT NULL,
    statusCode INTEGER AS Int NOT NULL,
    statusDescription TEXT NOT NULL,
    requestTime INTEGER AS GMTDate NOT NULL,
    responseTime INTEGER AS GMTDate NOT NULL,
    expires INTEGER AS GMTDate NOT NULL,
    version TEXT AS HttpProtocolVersion NOT NULL,
    varyKeys TEXT AS Map<String, String> NOT NULL,
    headers TEXT AS Headers NOT NULL,
    body BLOB NOT NULL,

    PRIMARY KEY (url, varyKeys)
);


readCache:
SELECT *
FROM cacheEntry
WHERE url = ? AND varyKeys = ?;

writeCache:
INSERT OR REPLACE
INTO cacheEntry
VALUES ?;

readCacheAll:
SELECT *
FROM cacheEntry
WHERE url = ?;

clearExpired:
DELETE FROM cacheEntry
WHERE expires < strftime('%s', 'now') / 1000 + 60*60;
